"""                              Web_Reader.py

Required Associated Hardware:
    There is an Arduino MKR 1010 with MLX 90614 sensor board and sketch required as input.  This board should be actively
    running before starting this routine.  reads sensor values, and will serve them to a web page generated by code in the sketch.
    The ip address of this server is set in the sketch code, and the url setting below must match this setting. This code uses Selenium as a
    client to the Arduino web server. Refreshing the web driver causes the Arduino web server to sample values from the
    sensor and post them at the specified url.  They are formatted in the body of the web page as a table, which can be
    read directly by pandas using the read_html method directly into a pandas dataframe.  This dataframe is parsed by
    this routine, appended to a .csv data file every <numRowsToWrite> readings, and plotted interactively in matplotlib.

Required packages:
    selenium    - also need to download driver for chrome, see here: https://sites.google.com/a/chromium.org/chromedriver/downloads
                  Note that you will need to specify the path where you download this driver as an assumption below!
    time
    pandas
    matplotlib

Settings:                                                                                                         """

url                 = 'http://192.168.8.236'                                    ##  Arduino Web Server with MXL 90614 data
refreshrate         = 5                                                         ##  sample rate in seconds
chromeDriverPath    = 'C:/Users/hoyes/Documents/libs/chromedriver.exe'          ##  path to Selenium Google Chrome Driver
csvDataFilename     = 'IR_temp_data.csv'                                        ##  sensor readings are saved to this file
numRowsToWrite      = 60                                                        ##  sensor readings will be written to .csv at this count

#########################################################################################################################################

from selenium import webdriver
import time
import pandas as pd
import matplotlib.pyplot as plt
from pandas.plotting import register_matplotlib_converters
register_matplotlib_converters()


def GetSensorDataDict(driver):
    driver.refresh()
    table = pd.read_html(driver.page_source, header=0)[0]
    rowDict = {col: val[0] for col, val in table.iteritems()}
    rowDict['Diff'] = rowDict['Ambient_F'] - rowDict['Object_F']
    rowDict['DateTime'] = pd.Timestamp.now()
    return rowDict

def WriteListToFile(rowList,csvDataFilename,header=False):
    print("Writing 60 recs to database")
    df = pd.DataFrame(rowList)
    f = open(csvDataFilename, 'a')
    df.to_csv(f, header=header, index=False)
    f.close()

class DataCharter:
    def __init__(self, numPointsMax=5000):
        self.x = []
        self.y = []
        self.d = []
        self.dif = []
        self.pltBufSize = numPointsMax

        plt.ion()

    def UpdateChart(self,rowDict):
        if rowDict['Ambient_F'] < 150 and rowDict['Object_F'] < 150:
            self.d.append(rowDict['DateTime'])
            self.d = self.d[-self.pltBufSize:]
            self.x.append(rowDict['Ambient_F'])
            self.x = self.x[-self.pltBufSize:]
            self.y.append(rowDict['Object_F'])
            self.y = self.y[-self.pltBufSize:]
            self.dif.append(rowDict['Diff'])
            self.dif = self.dif[-self.pltBufSize:]

            plt.gca().cla()  # clear the plot
            plt.plot(self.d, self.y)
            plt.plot(self.d, self.x)
            plt.plot(self.d,self.dif)
            plt.title("Ambient vs Object IR")
            plt.legend(['Sky IR F', 'Ambient IR F', 'Diff'], loc='upper left')
            plt.grid()
            plt.draw()
            plt.pause(0.1)

#########################################################################################################################################

## chart initialize
dChart = DataCharter()

## Selenium Web Browser using Chrome
try:
    driver = webdriver.Chrome(chromeDriverPath)
    driver.get(url)
except:
    print("Cannot open Chrome Driver or Arduino Sensor Server is Offline")
    exit()

SensReadList = []        # this is a list of dictionaries; each dict contains a sensor reading

for sample in range(1000000):
    time.sleep(refreshrate)                             ##  wait until next reading
    try:
        dctSensRead = GetSensorDataDict(driver)         ##  get the sensor reading from Arduino web server
    except:
        break
    SensReadList.append(dctSensRead)                    ##  append reading to the sensor reading list
    if len(SensReadList) == numRowsToWrite:             ## save the sensor data to csv file when buffer is full
        WriteListToFile(SensReadList,csvDataFilename,sample==0)
        SensReadList = []
    dChart.UpdateChart(dctSensRead)                     ##  update chart with current sensor reading

WriteListToFile(SensReadList,csvDataFilename,sample==0) ##  write any unsaved data points to the csv file and exit
print("Arduino IR Sensor is Offline - any unwritten data was saved to "+csvDataFilename)